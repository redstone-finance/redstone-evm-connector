{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "asset",
          "type": "bytes32"
        }
      ],
      "name": "executeWithPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "assets",
          "type": "bytes32[]"
        }
      ],
      "name": "executeWithPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxBlockTimestampDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxDataTimestampDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "asset",
          "type": "bytes32"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receviedSigner",
          "type": "address"
        }
      ],
      "name": "isSignerAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_receivedTimestamp",
          "type": "uint256"
        }
      ],
      "name": "isTimestampValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7a181fb64d7c60a628b03048d076365b1db46664528b5e3aee58156940b1c3a3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1219570",
    "logsBloom": "0x
    "blockHash": "0xdebf0a75f4577d6dedfe2f6ee0d17093e1168e1fdcb8e35d879448a6ed7709c8",
    "transactionHash": "0x7a181fb64d7c60a628b03048d076365b1db46664528b5e3aee58156940b1c3a3",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1219570",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "39550197d9eb28e8a9d2a6d2153004c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"}],\"name\":\"executeWithPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"assets\",\"type\":\"bytes32[]\"}],\"name\":\"executeWithPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxBlockTimestampDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxDataTimestampDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receviedSigner\",\"type\":\"address\"}],\"name\":\"isSignerAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_receivedTimestamp\",\"type\":\"uint256\"}],\"name\":\"isTimestampValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"An example of a contract using message-based way of fetching data from RedStone It has only a few dummy methods used to benchmark gas consumption It extends InlinedPriceAware which in-lines signer address and maximum delay of price feed to reduce the gas of every invocation (saving is ~4k gas)\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SampleInlinedPriceAware\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/samples/SampleInlinedPriceAware.sol\":\"SampleInlinedPriceAware\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"contracts/commons/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\n/**\\n * @title IPriceFeed\\n * @dev A minimal interface for contracts providing pricing data\\n */\\ninterface IPriceFeed {\\n  /**\\n   * @dev return the price of a given asset\\n   * @param symbol that identifies an asset (it's passed as bytes32 for the gas efficiency)\\n   **/\\n  function getPrice(bytes32 symbol) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb269e5aefb72e3d992971baecf8362347ff37f31b862f46dd97ec16067ea7803\",\"license\":\"MIT\"},\"contracts/message-based/PriceAware.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nabstract contract PriceAware {\\n  using ECDSA for bytes32;\\n\\n  uint256 constant _MAX_DATA_TIMESTAMP_DELAY = 3 * 60; // 3 minutes\\n  uint256 constant _MAX_BLOCK_TIMESTAMP_DELAY = 15; // 15 seconds\\n\\n  /* ========== VIRTUAL FUNCTIONS (MAY BE OVERRIDEN IN CHILD CONTRACTS) ========== */\\n\\n  function getMaxDataTimestampDelay() public virtual view returns (uint256) {\\n    return _MAX_DATA_TIMESTAMP_DELAY;\\n  }\\n\\n  function getMaxBlockTimestampDelay() public virtual view returns (uint256) {\\n    return _MAX_BLOCK_TIMESTAMP_DELAY;\\n  }\\n\\n  function isSignerAuthorized(address _receviedSigner) public virtual view returns (bool);\\n\\n  function isTimestampValid(uint256 _receivedTimestamp) public virtual view returns (bool) {\\n    // Getting data timestamp from future seems quite unlikely\\n    // But we've already spent too much time with different cases\\n    // Where block.timestamp was less than dataPackage.timestamp.\\n    // Some blockchains may case this problem as well.\\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\\n    // and allow data \\\"from future\\\" but with a small delay\\n    require(\\n      (block.timestamp + getMaxBlockTimestampDelay()) > _receivedTimestamp,\\n      \\\"Data with future timestamps is not allowed\\\");\\n\\n    return block.timestamp < _receivedTimestamp\\n      || block.timestamp - _receivedTimestamp < getMaxDataTimestampDelay();\\n  }\\n\\n  /* ========== FUNCTIONS WITH IMPLEMENTATION (CAN NOT BE OVERRIDEN) ========== */\\n\\n  function getPriceFromMsg(bytes32 symbol) internal view returns (uint256) {bytes32[] memory symbols = new bytes32[](1); symbols[0] = symbol;\\n    return getPricesFromMsg(symbols)[0];\\n  }\\n\\n  function getPricesFromMsg(bytes32[] memory symbols) internal view returns (uint256[] memory) {\\n    // The structure of calldata witn n - data items:\\n    // The data that is signed (symbols, values, timestamp) are inside the {} brackets\\n    // [origina_call_data| ?]{[[symbol | 32][value | 32] | n times][timestamp | 32]}[size | 1][signature | 65]\\n\\n    // 1. First we extract dataSize - the number of data items (symbol,value pairs) in the message\\n    uint8 dataSize; //Number of data entries\\n    assembly {\\n      // Calldataload loads slots of 32 bytes\\n      // The last 65 bytes are for signature\\n      // We load the previous 32 bytes and automatically take the 2 least significant ones (casting to uint16)\\n      dataSize := calldataload(sub(calldatasize(), 97))\\n    }\\n\\n    // 2. We calculate the size of signable message expressed in bytes\\n    // ((symbolLen(32) + valueLen(32)) * dataSize + timeStamp length\\n    uint16 messageLength = uint16(dataSize) * 64 + 32; //Length of data message in bytes\\n\\n    // 3. We extract the signableMessage\\n\\n    // (That's the high level equivalent 2k gas more expensive)\\n    // bytes memory rawData = msg.data.slice(msg.data.length - messageLength - 65, messageLength);\\n\\n    bytes memory signableMessage;\\n    assembly {\\n      signableMessage := mload(0x40)\\n      mstore(signableMessage, messageLength)\\n      // The starting point is callDataSize minus length of data(messageLength), signature(65) and size(1) = 66\\n      calldatacopy(\\n        add(signableMessage, 0x20),\\n        sub(calldatasize(), add(messageLength, 66)),\\n        messageLength\\n      )\\n      mstore(0x40, add(signableMessage, 0x20))\\n    }\\n\\n    // 4. We first hash the raw message and then hash it again with the prefix\\n    // Following the https://github.com/ethereum/eips/issues/191 standard\\n    bytes32 hash = keccak256(signableMessage);\\n    bytes32 hashWithPrefix = keccak256(\\n      abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n    );\\n\\n    // 5. We extract the off-chain signature from calldata\\n\\n    // (That's the high level equivalent 2k gas more expensive)\\n    // bytes memory signature = msg.data.slice(msg.data.length - 65, 65);\\n    bytes memory signature;\\n    assembly {\\n      signature := mload(0x40)\\n      mstore(signature, 65)\\n      calldatacopy(add(signature, 0x20), sub(calldatasize(), 65), 65)\\n      mstore(0x40, add(signature, 0x20))\\n    }\\n\\n    // 6. We verify the off-chain signature against on-chain hashed data\\n\\n    address signer = hashWithPrefix.recover(signature);\\n    require(isSignerAuthorized(signer), \\\"Signer not authorized\\\");\\n\\n    // 7. We extract timestamp from callData\\n\\n    uint256 dataTimestamp;\\n    assembly {\\n      // Calldataload loads slots of 32 bytes\\n      // The last 65 bytes are for signature + 1 for data size\\n      // We load the previous 32 bytes\\n      dataTimestamp := calldataload(sub(calldatasize(), 98))\\n    }\\n\\n    // 8. We validate timestamp\\n    require(isTimestampValid(dataTimestamp), \\\"Data timestamp is invalid\\\");\\n\\n    return _readFromCallData(symbols, uint256(dataSize), messageLength);\\n  }\\n\\n  function _readFromCallData(bytes32[] memory symbols, uint256 dataSize, uint16 messageLength) private pure returns (uint256[] memory) {\\n    uint256[] memory values;\\n    uint256 i;\\n    uint256 j;\\n    uint256 readyAssets;\\n    bytes32 currentSymbol;\\n\\n    // We iterate directly through call data to extract the values for symbols\\n    assembly {\\n      let start := sub(calldatasize(), add(messageLength, 66))\\n\\n      values := msize()\\n      mstore(values, mload(symbols))\\n      mstore(0x40, add(add(values, 0x20), mul(mload(symbols), 0x20)))\\n\\n      for { i := 0 } lt(i, dataSize) { i := add(i, 1) } {\\n        currentSymbol := calldataload(add(start, mul(i, 64)))\\n\\n        for { j := 0 } lt(j, mload(symbols)) { j := add(j, 1) } {\\n          if eq(mload(add(add(symbols, 32), mul(j, 32))), currentSymbol) {\\n            mstore(\\n              add(add(values, 32), mul(j, 32)),\\n              calldataload(add(add(start, mul(i, 64)), 32))\\n            )\\n            readyAssets := add(readyAssets, 1)\\n          }\\n\\n          if eq(readyAssets, mload(symbols)) {\\n            i := dataSize\\n          }\\n        }\\n      }\\n    }\\n\\n    return (values);\\n  }\\n}\\n\",\"keccak256\":\"0xd34e84e25c6ef3010f5479755258aaddaeba63fa56eee31db26778c0fdd9d30a\",\"license\":\"MIT\"},\"contracts/mocks/MockStatePriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../commons/IPriceFeed.sol\\\";\\n\\n/**\\n * @title MockStatePriceProvider\\n * @dev It simulates an external contract that provides price information taken from storage.\\n * It is a minimal version of other oracle referential data contracts\\n * like AggregatorInterface from Chainlink or IStdReference from Band\\n * and provides a lower bound for gas cost benchmarks.\\n */\\ncontract MockStatePriceProvider is IPriceFeed {\\n  uint256 price = 777;\\n\\n  /**\\n   * @dev gets mocked price\\n   * @param symbol of the price - kept for interface compatibility\\n   **/\\n  function getPrice(bytes32 symbol) public view override returns (uint256) {\\n    symbol; // It's added to avoid warnings about an unused function argument\\n    return price;\\n  }\\n\\n  /**\\n   * @dev sets new price allowing to update the mocked value\\n   * @param _price value of a new price\\n   **/\\n  function setPrice(uint256 _price) external {\\n    price = _price;\\n  }\\n}\\n\",\"keccak256\":\"0xb35f147c452b8352257762ffbedd06333ee11c5113b664295a3005a24c9ed78c\",\"license\":\"MIT\"},\"contracts/samples/SampleInlinedPriceAware.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../mocks/MockStatePriceProvider.sol\\\";\\nimport \\\"../message-based/PriceAware.sol\\\";\\n\\n/**\\n * @title SampleInlinedPriceAware\\n * @dev An example of a contract using message-based way of fetching data from RedStone\\n * It has only a few dummy methods used to benchmark gas consumption\\n * It extends InlinedPriceAware which in-lines signer address and maximum delay of price feed\\n * to reduce the gas of every invocation (saving is ~4k gas)\\n */\\ncontract SampleInlinedPriceAware is PriceAware {\\n\\n  address private constant TRUSTED_SIGNER = 0xFE71e9691B9524BC932C23d0EeD5c9CE41161884;\\n\\n  function isSignerAuthorized(address _receviedSigner) public override virtual view returns (bool) {\\n    return _receviedSigner == TRUSTED_SIGNER;\\n  }\\n\\n  function getPrice(bytes32 asset) external view returns (uint256) {\\n    return getPriceFromMsg(asset);\\n  }\\n\\n  function executeWithPrice(bytes32 asset) public view returns (uint256) {\\n    return getPriceFromMsg(asset);\\n  }\\n\\n  function executeWithPrices(bytes32[] memory assets)\\n    public\\n    view\\n    returns (uint256[] memory)\\n  {\\n    return getPricesFromMsg(assets);\\n  }\\n}\\n\",\"keccak256\":\"0xd9c71025ee4bab0a5357fbdd2bf18b30615ab72b02248fdaa639e81a5063ce7f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611544806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806343af3d991161005b57806343af3d99146101125780635118af5a146101425780637505820514610160578063f31a210a146101905761007d565b806311c89b1014610082578063125c81e6146100b257806331d98b3f146100e2575b600080fd5b61009c60048036038101906100979190610c05565b6101ae565b6040516100a99190610ef9565b60405180910390f35b6100cc60048036038101906100c79190610c2e565b6101fa565b6040516100d99190610ed7565b60405180910390f35b6100fc60048036038101906100f79190610c6f565b61020c565b6040516101099190611039565b60405180910390f35b61012c60048036038101906101279190610c6f565b61021e565b6040516101399190611039565b60405180910390f35b61014a610230565b6040516101579190611039565b60405180910390f35b61017a60048036038101906101759190610c98565b610239565b6040516101879190610ef9565b60405180910390f35b6101986102b5565b6040516101a59190611039565b60405180910390f35b600073fe71e9691b9524bc932c23d0eed5c9ce4116188473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6060610205826102be565b9050919050565b600061021782610426565b9050919050565b600061022982610426565b9050919050565b6000600f905090565b600081610244610230565b4261024f9190611132565b1161028f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028690611019565b60405180910390fd5b814210806102ae57506102a06102b5565b82426102ac91906111c4565b105b9050919050565b600060b4905090565b60606000606136033590506000602060408360ff166102dd9190611188565b6102e791906110fa565b905060606040519050818152816042830136036020830137602081016040526000818051906020012090506000816040516020016103259190610eb1565b60405160208183030381529060405280519060200120905060606040519050604181526041803603602083013760208101604052600061036e828461053490919063ffffffff16565b9050610379816101ae565b6103b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103af90610fb9565b60405180910390fd5b6000606236033590506103ca81610239565b610409576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040090610f99565b60405180910390fd5b6104178a8960ff168961055b565b98505050505050505050919050565b600080600167ffffffffffffffff81111561046a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156104985781602001602082028036833780820191505090505b50905082816000815181106104d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506104eb816102be565b600081518110610524577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151915050919050565b60008060006105438585610601565b9150915061055081610684565b819250505092915050565b6060806000806000806042870136035995508951865260208a51026020870101604052600094505b888510156105f157604085028101359150600093505b89518410156105e657816020850260208c01015114156105ce5760206040860282010135602085026020880101526001830192505b89518314156105db578894505b600184019350610599565b600185019450610583565b5084955050505050509392505050565b6000806041835114156106435760008060006020860151925060408601519150606086015160001a9050610637878285856109d5565b9450945050505061067d565b604083511415610674576000806020850151915060408501519050610669868383610ae2565b93509350505061067d565b60006002915091505b9250929050565b600060048111156106be577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156106f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610702576109d2565b6001600481111561073c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115610775577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156107b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ad90610f59565b60405180910390fd5b600260048111156107f0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115610829577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561086a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086190610f79565b60405180910390fd5b600360048111156108a4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156108dd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561091e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091590610fd9565b60405180910390fd5b600480811115610957577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115610990577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156109d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c890610ff9565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115610a10576000600391509150610ad9565b601b8560ff1614158015610a285750601c8560ff1614155b15610a3a576000600491509150610ad9565b600060018787878760405160008152602001604052604051610a5f9493929190610f14565b6020604051602081039080840390855afa158015610a81573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ad057600060019250925050610ad9565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c019050610b22878288856109d5565b935093505050935093915050565b6000610b43610b3e84611079565b611054565b90508083825260208201905082856020860282011115610b6257600080fd5b60005b85811015610b925781610b788882610bdb565b845260208401935060208301925050600181019050610b65565b5050509392505050565b600081359050610bab816114c9565b92915050565b600082601f830112610bc257600080fd5b8135610bd2848260208601610b30565b91505092915050565b600081359050610bea816114e0565b92915050565b600081359050610bff816114f7565b92915050565b600060208284031215610c1757600080fd5b6000610c2584828501610b9c565b91505092915050565b600060208284031215610c4057600080fd5b600082013567ffffffffffffffff811115610c5a57600080fd5b610c6684828501610bb1565b91505092915050565b600060208284031215610c8157600080fd5b6000610c8f84828501610bdb565b91505092915050565b600060208284031215610caa57600080fd5b6000610cb884828501610bf0565b91505092915050565b6000610ccd8383610e84565b60208301905092915050565b6000610ce4826110b5565b610cee81856110cd565b9350610cf9836110a5565b8060005b83811015610d2a578151610d118882610cc1565b9750610d1c836110c0565b925050600181019050610cfd565b5085935050505092915050565b610d408161120a565b82525050565b610d4f81611216565b82525050565b610d66610d6182611216565b611296565b82525050565b6000610d796018836110de565b9150610d848261130f565b602082019050919050565b6000610d9c601f836110de565b9150610da782611338565b602082019050919050565b6000610dbf601c836110ef565b9150610dca82611361565b601c82019050919050565b6000610de26019836110de565b9150610ded8261138a565b602082019050919050565b6000610e056015836110de565b9150610e10826113b3565b602082019050919050565b6000610e286022836110de565b9150610e33826113dc565b604082019050919050565b6000610e4b6022836110de565b9150610e568261142b565b604082019050919050565b6000610e6e602a836110de565b9150610e798261147a565b604082019050919050565b610e8d8161124e565b82525050565b610e9c8161124e565b82525050565b610eab81611258565b82525050565b6000610ebc82610db2565b9150610ec88284610d55565b60208201915081905092915050565b60006020820190508181036000830152610ef18184610cd9565b905092915050565b6000602082019050610f0e6000830184610d37565b92915050565b6000608082019050610f296000830187610d46565b610f366020830186610ea2565b610f436040830185610d46565b610f506060830184610d46565b95945050505050565b60006020820190508181036000830152610f7281610d6c565b9050919050565b60006020820190508181036000830152610f9281610d8f565b9050919050565b60006020820190508181036000830152610fb281610dd5565b9050919050565b60006020820190508181036000830152610fd281610df8565b9050919050565b60006020820190508181036000830152610ff281610e1b565b9050919050565b6000602082019050818103600083015261101281610e3e565b9050919050565b6000602082019050818103600083015261103281610e61565b9050919050565b600060208201905061104e6000830184610e93565b92915050565b600061105e61106f565b905061106a8282611265565b919050565b6000604051905090565b600067ffffffffffffffff821115611094576110936112cf565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061110582611220565b915061111083611220565b92508261ffff03821115611127576111266112a0565b5b828201905092915050565b600061113d8261124e565b91506111488361124e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561117d5761117c6112a0565b5b828201905092915050565b600061119382611220565b915061119e83611220565b92508161ffff04831182151516156111b9576111b86112a0565b5b828202905092915050565b60006111cf8261124e565b91506111da8361124e565b9250828210156111ed576111ec6112a0565b5b828203905092915050565b60006112038261122e565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b61126e826112fe565b810181811067ffffffffffffffff8211171561128d5761128c6112cf565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f446174612074696d657374616d7020697320696e76616c696400000000000000600082015250565b7f5369676e6572206e6f7420617574686f72697a65640000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f446174612077697468206675747572652074696d657374616d7073206973206e60008201527f6f7420616c6c6f77656400000000000000000000000000000000000000000000602082015250565b6114d2816111f8565b81146114dd57600080fd5b50565b6114e981611216565b81146114f457600080fd5b50565b6115008161124e565b811461150b57600080fd5b5056fea26469706673582212202c56806f35f462c23b6b6dc0f31a6ac4b5ea79b93ff74d902735512fd22bfa7164736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806343af3d991161005b57806343af3d99146101125780635118af5a146101425780637505820514610160578063f31a210a146101905761007d565b806311c89b1014610082578063125c81e6146100b257806331d98b3f146100e2575b600080fd5b61009c60048036038101906100979190610c05565b6101ae565b6040516100a99190610ef9565b60405180910390f35b6100cc60048036038101906100c79190610c2e565b6101fa565b6040516100d99190610ed7565b60405180910390f35b6100fc60048036038101906100f79190610c6f565b61020c565b6040516101099190611039565b60405180910390f35b61012c60048036038101906101279190610c6f565b61021e565b6040516101399190611039565b60405180910390f35b61014a610230565b6040516101579190611039565b60405180910390f35b61017a60048036038101906101759190610c98565b610239565b6040516101879190610ef9565b60405180910390f35b6101986102b5565b6040516101a59190611039565b60405180910390f35b600073fe71e9691b9524bc932c23d0eed5c9ce4116188473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6060610205826102be565b9050919050565b600061021782610426565b9050919050565b600061022982610426565b9050919050565b6000600f905090565b600081610244610230565b4261024f9190611132565b1161028f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028690611019565b60405180910390fd5b814210806102ae57506102a06102b5565b82426102ac91906111c4565b105b9050919050565b600060b4905090565b60606000606136033590506000602060408360ff166102dd9190611188565b6102e791906110fa565b905060606040519050818152816042830136036020830137602081016040526000818051906020012090506000816040516020016103259190610eb1565b60405160208183030381529060405280519060200120905060606040519050604181526041803603602083013760208101604052600061036e828461053490919063ffffffff16565b9050610379816101ae565b6103b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103af90610fb9565b60405180910390fd5b6000606236033590506103ca81610239565b610409576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040090610f99565b60405180910390fd5b6104178a8960ff168961055b565b98505050505050505050919050565b600080600167ffffffffffffffff81111561046a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156104985781602001602082028036833780820191505090505b50905082816000815181106104d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506104eb816102be565b600081518110610524577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151915050919050565b60008060006105438585610601565b9150915061055081610684565b819250505092915050565b6060806000806000806042870136035995508951865260208a51026020870101604052600094505b888510156105f157604085028101359150600093505b89518410156105e657816020850260208c01015114156105ce5760206040860282010135602085026020880101526001830192505b89518314156105db578894505b600184019350610599565b600185019450610583565b5084955050505050509392505050565b6000806041835114156106435760008060006020860151925060408601519150606086015160001a9050610637878285856109d5565b9450945050505061067d565b604083511415610674576000806020850151915060408501519050610669868383610ae2565b93509350505061067d565b60006002915091505b9250929050565b600060048111156106be577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156106f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610702576109d2565b6001600481111561073c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115610775577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156107b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ad90610f59565b60405180910390fd5b600260048111156107f0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115610829577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561086a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086190610f79565b60405180910390fd5b600360048111156108a4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156108dd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561091e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091590610fd9565b60405180910390fd5b600480811115610957577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115610990577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156109d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c890610ff9565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115610a10576000600391509150610ad9565b601b8560ff1614158015610a285750601c8560ff1614155b15610a3a576000600491509150610ad9565b600060018787878760405160008152602001604052604051610a5f9493929190610f14565b6020604051602081039080840390855afa158015610a81573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ad057600060019250925050610ad9565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c019050610b22878288856109d5565b935093505050935093915050565b6000610b43610b3e84611079565b611054565b90508083825260208201905082856020860282011115610b6257600080fd5b60005b85811015610b925781610b788882610bdb565b845260208401935060208301925050600181019050610b65565b5050509392505050565b600081359050610bab816114c9565b92915050565b600082601f830112610bc257600080fd5b8135610bd2848260208601610b30565b91505092915050565b600081359050610bea816114e0565b92915050565b600081359050610bff816114f7565b92915050565b600060208284031215610c1757600080fd5b6000610c2584828501610b9c565b91505092915050565b600060208284031215610c4057600080fd5b600082013567ffffffffffffffff811115610c5a57600080fd5b610c6684828501610bb1565b91505092915050565b600060208284031215610c8157600080fd5b6000610c8f84828501610bdb565b91505092915050565b600060208284031215610caa57600080fd5b6000610cb884828501610bf0565b91505092915050565b6000610ccd8383610e84565b60208301905092915050565b6000610ce4826110b5565b610cee81856110cd565b9350610cf9836110a5565b8060005b83811015610d2a578151610d118882610cc1565b9750610d1c836110c0565b925050600181019050610cfd565b5085935050505092915050565b610d408161120a565b82525050565b610d4f81611216565b82525050565b610d66610d6182611216565b611296565b82525050565b6000610d796018836110de565b9150610d848261130f565b602082019050919050565b6000610d9c601f836110de565b9150610da782611338565b602082019050919050565b6000610dbf601c836110ef565b9150610dca82611361565b601c82019050919050565b6000610de26019836110de565b9150610ded8261138a565b602082019050919050565b6000610e056015836110de565b9150610e10826113b3565b602082019050919050565b6000610e286022836110de565b9150610e33826113dc565b604082019050919050565b6000610e4b6022836110de565b9150610e568261142b565b604082019050919050565b6000610e6e602a836110de565b9150610e798261147a565b604082019050919050565b610e8d8161124e565b82525050565b610e9c8161124e565b82525050565b610eab81611258565b82525050565b6000610ebc82610db2565b9150610ec88284610d55565b60208201915081905092915050565b60006020820190508181036000830152610ef18184610cd9565b905092915050565b6000602082019050610f0e6000830184610d37565b92915050565b6000608082019050610f296000830187610d46565b610f366020830186610ea2565b610f436040830185610d46565b610f506060830184610d46565b95945050505050565b60006020820190508181036000830152610f7281610d6c565b9050919050565b60006020820190508181036000830152610f9281610d8f565b9050919050565b60006020820190508181036000830152610fb281610dd5565b9050919050565b60006020820190508181036000830152610fd281610df8565b9050919050565b60006020820190508181036000830152610ff281610e1b565b9050919050565b6000602082019050818103600083015261101281610e3e565b9050919050565b6000602082019050818103600083015261103281610e61565b9050919050565b600060208201905061104e6000830184610e93565b92915050565b600061105e61106f565b905061106a8282611265565b919050565b6000604051905090565b600067ffffffffffffffff821115611094576110936112cf565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061110582611220565b915061111083611220565b92508261ffff03821115611127576111266112a0565b5b828201905092915050565b600061113d8261124e565b91506111488361124e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561117d5761117c6112a0565b5b828201905092915050565b600061119382611220565b915061119e83611220565b92508161ffff04831182151516156111b9576111b86112a0565b5b828202905092915050565b60006111cf8261124e565b91506111da8361124e565b9250828210156111ed576111ec6112a0565b5b828203905092915050565b60006112038261122e565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b61126e826112fe565b810181811067ffffffffffffffff8211171561128d5761128c6112cf565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f446174612074696d657374616d7020697320696e76616c696400000000000000600082015250565b7f5369676e6572206e6f7420617574686f72697a65640000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f446174612077697468206675747572652074696d657374616d7073206973206e60008201527f6f7420616c6c6f77656400000000000000000000000000000000000000000000602082015250565b6114d2816111f8565b81146114dd57600080fd5b50565b6114e981611216565b81146114f457600080fd5b50565b6115008161124e565b811461150b57600080fd5b5056fea26469706673582212202c56806f35f462c23b6b6dc0f31a6ac4b5ea79b93ff74d902735512fd22bfa7164736f6c63430008040033",
  "devdoc": {
    "details": "An example of a contract using message-based way of fetching data from RedStone It has only a few dummy methods used to benchmark gas consumption It extends InlinedPriceAware which in-lines signer address and maximum delay of price feed to reduce the gas of every invocation (saving is ~4k gas)",
    "kind": "dev",
    "methods": {},
    "title": "SampleInlinedPriceAware",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}