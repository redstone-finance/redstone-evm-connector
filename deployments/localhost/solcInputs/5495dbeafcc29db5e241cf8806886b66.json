{
  "language": "Solidity",
  "sources": {
    "contracts/storage-based/without-clearing/RedstoneCoreProxyWithoutClearing.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../../commons/BytesLib.sol\";\nimport \"../../commons/PriceFeed.sol\";\nimport \"@openzeppelin/contracts/proxy/Proxy.sol\";\n\nabstract contract RedstoneCoreProxyWithoutClearing is Proxy {\n  using BytesLib for bytes;\n\n  bytes32 constant MARKER = keccak256(\"Redstone.version.0.0.1\");\n  uint8 constant MARKER_SLOT_SIZE = 32;\n  uint8 constant LEN_SLOT_SIZE = 2;\n\n  /**\n   * @dev Delegates the current call to `implementation`.\n   *\n   * It extracts the pricing data and keep it in the storage of priceFeed contract.\n   * Then it forwards the call to the implementation recording the results.\n   * As the last step it cleans the data from priceFeed to save on gas fees\n   * and forwards the results to the caller.\n   */\n  function _delegate(address implementation) internal override {\n    // Check if transaction contains Redstone marker\n    bool isTxWithPricing = false;\n    if (msg.data.length > MARKER_SLOT_SIZE) {\n      isTxWithPricing =\n        msg.data.toBytes32(msg.data.length - MARKER_SLOT_SIZE) == MARKER;\n    }\n\n    // Register price data\n    bytes memory priceData;\n    uint16 priceDataLen;\n    uint16 markerAndLenOffset = (MARKER_SLOT_SIZE + LEN_SLOT_SIZE);\n    if (isTxWithPricing) {\n      priceDataLen = msg.data.toUint16(msg.data.length - markerAndLenOffset);\n      priceData = msg.data.slice(\n        msg.data.length - priceDataLen - markerAndLenOffset,\n        priceDataLen\n      );\n      (bool success, ) = _priceFeed().call(priceData);\n      require(success, \"Error setting price data\");\n    }\n\n    // Copied from openzeppelin github repo\n    // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/Proxy.sol\n    assembly {\n      // Copy msg.data. We take full control of memory in this inline assembly\n      // block because it will not return to Solidity code. We overwrite the\n      // Solidity scratch pad at memory position 0.\n      calldatacopy(0, 0, calldatasize())\n\n      // Call the implementation.\n      // out and outsize are 0 because we don't know the size yet.\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n      // Copy the returned data.\n      returndatacopy(0, 0, returndatasize())\n\n      switch result\n      // delegatecall returns 0 on error.\n      case 0 {\n        revert(0, returndatasize())\n      }\n      default {\n        return(0, returndatasize())\n      }\n    }\n  }\n\n  /**\n   * @dev This is a virtual function that should be overriden\n   * to return the address of the contract which keeps the prices on-chain\n   */\n  function _priceFeed() internal view virtual returns (address);\n}\n"
    },
    "contracts/commons/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n/*\n * The library was upgraded by Redstone to Solidity 0.8. The original author below:\n *\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity ^0.8.2;\n\nlibrary BytesLib {\n  function concat(bytes memory _preBytes, bytes memory _postBytes)\n    internal\n    pure\n    returns (bytes memory)\n  {\n    bytes memory tempBytes;\n\n    assembly {\n      // Get a location of some free memory and store it in tempBytes as\n      // Solidity does for memory variables.\n      tempBytes := mload(0x40)\n\n      // Store the length of the first bytes array at the beginning of\n      // the memory for tempBytes.\n      let length := mload(_preBytes)\n      mstore(tempBytes, length)\n\n      // Maintain a memory counter for the current write location in the\n      // temp bytes array by adding the 32 bytes for the array length to\n      // the starting location.\n      let mc := add(tempBytes, 0x20)\n      // Stop copying when the memory counter reaches the length of the\n      // first bytes array.\n      let end := add(mc, length)\n\n      for {\n        // Initialize a copy counter to the start of the _preBytes data,\n        // 32 bytes into its memory.\n        let cc := add(_preBytes, 0x20)\n      } lt(mc, end) {\n        // Increase both counters by 32 bytes each iteration.\n        mc := add(mc, 0x20)\n        cc := add(cc, 0x20)\n      } {\n        // Write the _preBytes data into the tempBytes memory 32 bytes\n        // at a time.\n        mstore(mc, mload(cc))\n      }\n\n      // Add the length of _postBytes to the current length of tempBytes\n      // and store it as the new length in the first 32 bytes of the\n      // tempBytes memory.\n      length := mload(_postBytes)\n      mstore(tempBytes, add(length, mload(tempBytes)))\n\n      // Move the memory counter back from a multiple of 0x20 to the\n      // actual end of the _preBytes data.\n      mc := end\n      // Stop copying when the memory counter reaches the new combined\n      // length of the arrays.\n      end := add(mc, length)\n\n      for {\n        let cc := add(_postBytes, 0x20)\n      } lt(mc, end) {\n        mc := add(mc, 0x20)\n        cc := add(cc, 0x20)\n      } {\n        mstore(mc, mload(cc))\n      }\n\n      // Update the free-memory pointer by padding our last write location\n      // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n      // next 32 byte block, then round down to the nearest multiple of\n      // 32. If the sum of the length of the two arrays is zero then add\n      // one before rounding down to leave a blank 32 bytes (the length block with 0).\n      mstore(\n        0x40,\n        and(\n          add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n          not(31) // Round down to the nearest 32 bytes.\n        )\n      )\n    }\n\n    return tempBytes;\n  }\n\n  function concatStorage(bytes storage _preBytes, bytes memory _postBytes)\n    internal\n  {\n    assembly {\n      // Read the first 32 bytes of _preBytes storage, which is the length\n      // of the array. (We don't need to use the offset into the slot\n      // because arrays use the entire slot.)\n      let fslot := sload(_preBytes.slot)\n      // Arrays of 31 bytes or less have an even value in their slot,\n      // while longer arrays have an odd value. The actual length is\n      // the slot divided by two for odd values, and the lowest order\n      // byte divided by two for even values.\n      // If the slot is even, bitwise and the slot with 255 and divide by\n      // two to get the length. If the slot is odd, bitwise and the slot\n      // with -1 and divide by two.\n      let slength := div(\n        and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\n        2\n      )\n      let mlength := mload(_postBytes)\n      let newlength := add(slength, mlength)\n      // slength can contain both the length and contents of the array\n      // if length < 32 bytes so let's prepare for that\n      // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n      switch add(lt(slength, 32), lt(newlength, 32))\n      case 2 {\n        // Since the new array still fits in the slot, we just need to\n        // update the contents of the slot.\n        // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n        sstore(\n          _preBytes.slot,\n          // all the modifications to the slot are inside this\n          // next block\n          add(\n            // we can just add to the slot contents because the\n            // bytes we want to change are the LSBs\n            fslot,\n            add(\n              mul(\n                div(\n                  // load the bytes from memory\n                  mload(add(_postBytes, 0x20)),\n                  // zero all bytes to the right\n                  exp(0x100, sub(32, mlength))\n                ),\n                // and now shift left the number of bytes to\n                // leave space for the length in the slot\n                exp(0x100, sub(32, newlength))\n              ),\n              // increase length by the double of the memory\n              // bytes length\n              mul(mlength, 2)\n            )\n          )\n        )\n      }\n      case 1 {\n        // The stored value fits in the slot, but the combined value\n        // will exceed it.\n        // get the keccak hash to get the contents of the array\n        mstore(0x0, _preBytes.slot)\n        let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n        // save new length\n        sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n        // The contents of the _postBytes array start 32 bytes into\n        // the structure. Our first read should obtain the `submod`\n        // bytes that can fit into the unused space in the last word\n        // of the stored array. To get this, we read 32 bytes starting\n        // from `submod`, so the data we read overlaps with the array\n        // contents by `submod` bytes. Masking the lowest-order\n        // `submod` bytes allows us to add that value directly to the\n        // stored value.\n\n        let submod := sub(32, slength)\n        let mc := add(_postBytes, submod)\n        let end := add(_postBytes, mlength)\n        let mask := sub(exp(0x100, submod), 1)\n\n        sstore(\n          sc,\n          add(\n            and(\n              fslot,\n              0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n            ),\n            and(mload(mc), mask)\n          )\n        )\n\n        for {\n          mc := add(mc, 0x20)\n          sc := add(sc, 1)\n        } lt(mc, end) {\n          sc := add(sc, 1)\n          mc := add(mc, 0x20)\n        } {\n          sstore(sc, mload(mc))\n        }\n\n        mask := exp(0x100, sub(mc, end))\n\n        sstore(sc, mul(div(mload(mc), mask), mask))\n      }\n      default {\n        // get the keccak hash to get the contents of the array\n        mstore(0x0, _preBytes.slot)\n        // Start copying to the last used word of the stored array.\n        let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n        // save new length\n        sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n        // Copy over the first `submod` bytes of the new data as in\n        // case 1 above.\n        let slengthmod := mod(slength, 32)\n        let mlengthmod := mod(mlength, 32)\n        let submod := sub(32, slengthmod)\n        let mc := add(_postBytes, submod)\n        let end := add(_postBytes, mlength)\n        let mask := sub(exp(0x100, submod), 1)\n\n        sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n        for {\n          sc := add(sc, 1)\n          mc := add(mc, 0x20)\n        } lt(mc, end) {\n          sc := add(sc, 1)\n          mc := add(mc, 0x20)\n        } {\n          sstore(sc, mload(mc))\n        }\n\n        mask := exp(0x100, sub(mc, end))\n\n        sstore(sc, mul(div(mload(mc), mask), mask))\n      }\n    }\n  }\n\n  function slice(\n    bytes memory _bytes,\n    uint256 _start,\n    uint256 _length\n  ) internal pure returns (bytes memory) {\n    require(_length + 31 >= _length, \"slice_overflow\");\n    require(_start + _length >= _start, \"slice_overflow\");\n    require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n    bytes memory tempBytes;\n\n    assembly {\n      switch iszero(_length)\n      case 0 {\n        // Get a location of some free memory and store it in tempBytes as\n        // Solidity does for memory variables.\n        tempBytes := mload(0x40)\n\n        // The first word of the slice result is potentially a partial\n        // word read from the original array. To read it, we calculate\n        // the length of that partial word and start copying that many\n        // bytes into the array. The first word we copy will start with\n        // data we don't care about, but the last `lengthmod` bytes will\n        // land at the beginning of the contents of the new array. When\n        // we're done copying, we overwrite the full first word with\n        // the actual length of the slice.\n        let lengthmod := and(_length, 31)\n\n        // The multiplication in the next line is necessary\n        // because when slicing multiples of 32 bytes (lengthmod == 0)\n        // the following copy loop was copying the origin's length\n        // and then ending prematurely not copying everything it should.\n        let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n        let end := add(mc, _length)\n\n        for {\n          // The multiplication in the next line has the same exact purpose\n          // as the one above.\n          let cc := add(\n            add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))),\n            _start\n          )\n        } lt(mc, end) {\n          mc := add(mc, 0x20)\n          cc := add(cc, 0x20)\n        } {\n          mstore(mc, mload(cc))\n        }\n\n        mstore(tempBytes, _length)\n\n        //update free-memory pointer\n        //allocating the array padded to 32 bytes like the compiler does now\n        mstore(0x40, and(add(mc, 31), not(31)))\n      }\n      //if we want a zero-length slice let's just return a zero-length array\n      default {\n        tempBytes := mload(0x40)\n        //zero out the 32 bytes slice we are about to return\n        //we need to do it because Solidity does not garbage collect\n        mstore(tempBytes, 0)\n\n        mstore(0x40, add(tempBytes, 0x20))\n      }\n    }\n\n    return tempBytes;\n  }\n\n  function toAddress(bytes memory _bytes, uint256 _start)\n    internal\n    pure\n    returns (address)\n  {\n    require(_start + 20 >= _start, \"toAddress_overflow\");\n    require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n    address tempAddress;\n\n    assembly {\n      tempAddress := div(\n        mload(add(add(_bytes, 0x20), _start)),\n        0x1000000000000000000000000\n      )\n    }\n\n    return tempAddress;\n  }\n\n  function toUint8(bytes memory _bytes, uint256 _start)\n    internal\n    pure\n    returns (uint8)\n  {\n    require(_start + 1 >= _start, \"toUint8_overflow\");\n    require(_bytes.length >= _start + 1, \"toUint8_outOfBounds\");\n    uint8 tempUint;\n\n    assembly {\n      tempUint := mload(add(add(_bytes, 0x1), _start))\n    }\n\n    return tempUint;\n  }\n\n  function toUint16(bytes memory _bytes, uint256 _start)\n    internal\n    pure\n    returns (uint16)\n  {\n    require(_start + 2 >= _start, \"toUint16_overflow\");\n    require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n    uint16 tempUint;\n\n    assembly {\n      tempUint := mload(add(add(_bytes, 0x2), _start))\n    }\n\n    return tempUint;\n  }\n\n  function toUint32(bytes memory _bytes, uint256 _start)\n    internal\n    pure\n    returns (uint32)\n  {\n    require(_start + 4 >= _start, \"toUint32_overflow\");\n    require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n    uint32 tempUint;\n\n    assembly {\n      tempUint := mload(add(add(_bytes, 0x4), _start))\n    }\n\n    return tempUint;\n  }\n\n  function toUint64(bytes memory _bytes, uint256 _start)\n    internal\n    pure\n    returns (uint64)\n  {\n    require(_start + 8 >= _start, \"toUint64_overflow\");\n    require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n    uint64 tempUint;\n\n    assembly {\n      tempUint := mload(add(add(_bytes, 0x8), _start))\n    }\n\n    return tempUint;\n  }\n\n  function toUint96(bytes memory _bytes, uint256 _start)\n    internal\n    pure\n    returns (uint96)\n  {\n    require(_start + 12 >= _start, \"toUint96_overflow\");\n    require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n    uint96 tempUint;\n\n    assembly {\n      tempUint := mload(add(add(_bytes, 0xc), _start))\n    }\n\n    return tempUint;\n  }\n\n  function toUint128(bytes memory _bytes, uint256 _start)\n    internal\n    pure\n    returns (uint128)\n  {\n    require(_start + 16 >= _start, \"toUint128_overflow\");\n    require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n    uint128 tempUint;\n\n    assembly {\n      tempUint := mload(add(add(_bytes, 0x10), _start))\n    }\n\n    return tempUint;\n  }\n\n  function toUint256(bytes memory _bytes, uint256 _start)\n    internal\n    pure\n    returns (uint256)\n  {\n    require(_start + 32 >= _start, \"toUint256_overflow\");\n    require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n    uint256 tempUint;\n\n    assembly {\n      tempUint := mload(add(add(_bytes, 0x20), _start))\n    }\n\n    return tempUint;\n  }\n\n  function toBytes32(bytes memory _bytes, uint256 _start)\n    internal\n    pure\n    returns (bytes32)\n  {\n    require(_start + 32 >= _start, \"toBytes32_overflow\");\n    require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n    bytes32 tempBytes32;\n\n    assembly {\n      tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n    }\n\n    return tempBytes32;\n  }\n\n  function equal(bytes memory _preBytes, bytes memory _postBytes)\n    internal\n    pure\n    returns (bool)\n  {\n    bool success = true;\n\n    assembly {\n      let length := mload(_preBytes)\n\n      // if lengths don't match the arrays are not equal\n      switch eq(length, mload(_postBytes))\n      case 1 {\n        // cb is a circuit breaker in the for loop since there's\n        //  no said feature for inline assembly loops\n        // cb = 1 - don't breaker\n        // cb = 0 - break\n        let cb := 1\n\n        let mc := add(_preBytes, 0x20)\n        let end := add(mc, length)\n\n        for {\n          let cc := add(_postBytes, 0x20)\n          // the next line is the loop condition:\n          // while(uint256(mc < end) + cb == 2)\n        } eq(add(lt(mc, end), cb), 2) {\n          mc := add(mc, 0x20)\n          cc := add(cc, 0x20)\n        } {\n          // if any of these checks fails then arrays are not equal\n          if iszero(eq(mload(mc), mload(cc))) {\n            // unsuccess:\n            success := 0\n            cb := 0\n          }\n        }\n      }\n      default {\n        // unsuccess:\n        success := 0\n      }\n    }\n\n    return success;\n  }\n\n  function equalStorage(bytes storage _preBytes, bytes memory _postBytes)\n    internal\n    view\n    returns (bool)\n  {\n    bool success = true;\n\n    assembly {\n      // we know _preBytes_offset is 0\n      let fslot := sload(_preBytes.slot)\n      // Decode the length of the stored array like in concatStorage().\n      let slength := div(\n        and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\n        2\n      )\n      let mlength := mload(_postBytes)\n\n      // if lengths don't match the arrays are not equal\n      switch eq(slength, mlength)\n      case 1 {\n        // slength can contain both the length and contents of the array\n        // if length < 32 bytes so let's prepare for that\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n        if iszero(iszero(slength)) {\n          switch lt(slength, 32)\n          case 1 {\n            // blank the last byte which is the length\n            fslot := mul(div(fslot, 0x100), 0x100)\n\n            if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n              // unsuccess:\n              success := 0\n            }\n          }\n          default {\n            // cb is a circuit breaker in the for loop since there's\n            //  no said feature for inline assembly loops\n            // cb = 1 - don't breaker\n            // cb = 0 - break\n            let cb := 1\n\n            // get the keccak hash to get the contents of the array\n            mstore(0x0, _preBytes.slot)\n            let sc := keccak256(0x0, 0x20)\n\n            let mc := add(_postBytes, 0x20)\n            let end := add(mc, mlength)\n\n            // the next line is the loop condition:\n            // while(uint256(mc < end) + cb == 2)\n            for {\n\n            } eq(add(lt(mc, end), cb), 2) {\n              sc := add(sc, 1)\n              mc := add(mc, 0x20)\n            } {\n              if iszero(eq(sload(sc), mload(mc))) {\n                // unsuccess:\n                success := 0\n                cb := 0\n              }\n            }\n          }\n        }\n      }\n      default {\n        // unsuccess:\n        success := 0\n      }\n    }\n\n    return success;\n  }\n}\n"
    },
    "contracts/commons/PriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\npragma experimental ABIEncoderV2;\n\nimport \"./IPriceFeed.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./PriceVerifier.sol\";\n\n/**\n * @title PriceFeed\n * @dev A contract that provides prices for assets\n * It's integrated with the PriceVerifier contract that checks data authenticity\n */\ncontract PriceFeed is IPriceFeed, PriceVerifier, Ownable {\n  uint256 public maxPriceDelayMilliseconds = 5 * 60 * 1000;\n\n  // A map indicating if a signer could be trusted by a client protocol\n  mapping(address => bool) trustedSigners;\n\n  mapping(bytes32 => uint256) internal prices;\n\n  function setPrices(PriceData calldata _priceData, bytes calldata _signature)\n    external\n  {\n    PriceData memory priceData = _priceData;\n    bytes memory signature = _signature;\n    _checkPrices(priceData, signature);\n    _setPrices(_priceData);\n  }\n\n  function _checkPrices(PriceData memory priceData, bytes memory signature)\n    public\n    view\n  {\n    address signer = recoverDataSigner(priceData, signature);\n    uint256 blockTimestampMillseconds = block.timestamp * 1000;\n\n    require(isSigner(signer), \"Unauthorized price data signer\");\n    require(\n      blockTimestampMillseconds - priceData.timestamp <\n        maxPriceDelayMilliseconds,\n      \"Price data timestamp too old\"\n    );\n  }\n\n  function _setPrices(PriceData calldata priceData) internal virtual {\n    // TODO: later we can implement rules for update skipping\n    // e.g. if price has chhanged insignifficantly\n    // or if current time is too close to the last updated time\n    for (uint256 i = 0; i < priceData.symbols.length; i++) {\n      prices[priceData.symbols[i]] = priceData.values[i];\n    }\n  }\n\n  function setMaxPriceDelay(uint256 _maxPriceDelayMilliseconds)\n    external\n    onlyOwner\n  {\n    require(\n      _maxPriceDelayMilliseconds > 0,\n      \"Maximum price delay must be greater than 0\"\n    );\n    maxPriceDelayMilliseconds = _maxPriceDelayMilliseconds;\n  }\n\n  function getPrice(bytes32 symbol) public view override returns (uint256) {\n    require(prices[symbol] > 0, \"No pricing data for given symbol\");\n    return prices[symbol];\n  }\n\n  function authorizeSigner(address signer) external onlyOwner {\n    trustedSigners[signer] = true;\n  }\n\n  function revokeSigner(address signer) external onlyOwner {\n    delete trustedSigners[signer];\n  }\n\n  function isSigner(address potentialSigner) public view returns (bool) {\n    return trustedSigners[potentialSigner];\n  }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "contracts/commons/IPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\n/**\n * @title IPriceFeed\n * @dev A minimal interface for contracts providing pricing data\n */\ninterface IPriceFeed {\n  /**\n   * @dev return the price of a given asset\n   * @param symbol that identifies an asset (it's passed as bytes32 for the gas efficiency)\n   **/\n  function getPrice(bytes32 symbol) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/commons/PriceVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"./PriceModel.sol\";\n\ncontract PriceVerifier is PriceModel {\n  using ECDSA for bytes32;\n\n  bytes32 constant DOMAIN_SEPARATOR =\n    keccak256(\n      abi.encode(\n        EIP712_DOMAIN_TYPEHASH,\n        keccak256(\"Redstone\"),\n        keccak256(\"0.4\"),\n        1 //chainId - to be removed\n      )\n    );\n\n  function recoverDataSigner(PriceData memory priceData, bytes memory signature)\n    internal\n    pure\n    returns (address)\n  {\n    bytes32 hash = hashPriceData(priceData);\n    return hash.recover(signature);\n  }\n\n  // We follow the EIP-712 standard for structured data hashing and signing\n  // Learn more: https://eips.ethereum.org/EIPS/eip-712\n  function hashPriceData(PriceData memory priceData)\n    internal\n    pure\n    returns (bytes32)\n  {\n    return\n      keccak256(\n        abi.encodePacked(\n          \"\\x19\\x01\",\n          DOMAIN_SEPARATOR,\n          keccak256(\n            abi.encode(\n              PRICE_DATA__TYPEHASH,\n              keccak256(abi.encodePacked(priceData.symbols)),\n              keccak256(abi.encodePacked(priceData.values)),\n              priceData.timestamp\n            )\n          )\n        )\n      );\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/commons/PriceModel.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\npragma experimental ABIEncoderV2;\n\ncontract PriceModel {\n  string constant EIP712_DOMAIN =\n    \"EIP712Domain(string name,string version,uint256 chainId)\";\n  bytes32 public constant EIP712_DOMAIN_TYPEHASH =\n    keccak256(abi.encodePacked(EIP712_DOMAIN));\n\n  string constant PRICE_DATA__TYPE =\n    \"PriceData(bytes32[] symbols,uint256[] values,uint256 timestamp)\";\n  bytes32 constant PRICE_DATA__TYPEHASH =\n    keccak256(abi.encodePacked(PRICE_DATA__TYPE));\n\n  struct PriceData {\n    bytes32[] symbols;\n    uint256[] values;\n    uint256 timestamp;\n  }\n}\n"
    },
    "contracts/storage-based/without-clearing/RedstoneProxyWithoutClearing.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"./RedstoneCoreProxyWithoutClearing.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\n\ncontract RedstoneProxyWithoutClearing is\n  RedstoneCoreProxyWithoutClearing,\n  ERC1967Upgrade\n{\n  // Note! We cannot add non-constant fields to this contract\n  // Because they would override the fields from the proxied contract\n  // It happens because EVM identifies them based on types and order (not their names)\n\n  // We follow the EIP-1967 stanard for Proxy Storage Slots\n  // Learn more: https://eips.ethereum.org/EIPS/eip-1967\n  bytes32 constant _PRICE_FEED_SLOT =\n    bytes32(uint256(keccak256(\"redstone.price_feed.implementation\")) - 1);\n\n  /**\n   * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n   *\n   * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n   * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n   */\n  constructor(\n    address _logic,\n    address _priceFeedAddress,\n    bytes memory _data\n  ) payable {\n    _setPriceFeed(_priceFeedAddress);\n    _upgradeToAndCall(_logic, _data, false);\n  }\n\n  /**\n   * @dev Returns the current implementation address.\n   */\n  function _implementation()\n    internal\n    view\n    virtual\n    override\n    returns (address impl)\n  {\n    return ERC1967Upgrade._getImplementation();\n  }\n\n  /**\n   * @dev Returns the current price feed address\n   */\n  function _priceFeed() internal view override returns (address) {\n    return StorageSlot.getAddressSlot(_PRICE_FEED_SLOT).value;\n  }\n\n  function _setPriceFeed(address _priceFeedAddress) private {\n    require(\n      _priceFeedAddress != address(0),\n      \"Price feed address cannot be empty\"\n    );\n\n    assert(\n      _IMPLEMENTATION_SLOT ==\n        bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1)\n    );\n    StorageSlot.getAddressSlot(_PRICE_FEED_SLOT).value = _priceFeedAddress;\n  }\n\n  /**\n   * @dev Sets the price feed address (internal function)\n   */\n  function setPriceFeed(address _priceFeedAddress) external {\n    require(msg.sender == _getAdmin(), \"Only admin can set price feed\");\n    _setPriceFeed(_priceFeedAddress);\n  }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/storage-based/without-clearing/RedstoneUpgradeableProxyWithoutClearing.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n//This code is represent the OpenZeppelin TransparentUpgradeableProxy.sol\n//and is modified only to maintain the inheritance-based design pattern\n//by changing the base contract\n\npragma solidity ^0.8.2;\n\nimport \"./RedstoneProxyWithoutClearing.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\n\ncontract RedstoneUpgradeableProxyWithoutClearing is\n  RedstoneProxyWithoutClearing\n{\n  /**\n   * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n   * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n   */\n  constructor(\n    address _logic,\n    address _priceFeedAddress,\n    address admin_,\n    bytes memory _data\n  ) payable RedstoneProxyWithoutClearing(_logic, _priceFeedAddress, _data) {\n    assert(\n      _ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1)\n    );\n    _changeAdmin(admin_);\n  }\n\n  /**\n   * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n   */\n  modifier ifAdmin() {\n    if (msg.sender == _getAdmin()) {\n      _;\n    } else {\n      _fallback();\n    }\n  }\n\n  /**\n   * @dev Returns the current admin.\n   *\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n   *\n   * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n   * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n   * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n   */\n  function admin() external ifAdmin returns (address admin_) {\n    admin_ = _getAdmin();\n  }\n\n  /**\n   * @dev Returns the current implementation.\n   *\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n   *\n   * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n   * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n   * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n   */\n  function implementation() external ifAdmin returns (address implementation_) {\n    implementation_ = _implementation();\n  }\n\n  /**\n   * @dev Changes the admin of the proxy.\n   *\n   * Emits an {AdminChanged} event.\n   *\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n   */\n  function changeAdmin(address newAdmin) external virtual ifAdmin {\n    _changeAdmin(newAdmin);\n  }\n\n  /**\n   * @dev Upgrade the implementation of the proxy.\n   *\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n   */\n  function upgradeTo(address newImplementation) external ifAdmin {\n    _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n  }\n\n  /**\n   * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n   * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n   * proxied contract.\n   *\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n   */\n  function upgradeToAndCall(address newImplementation, bytes calldata data)\n    external\n    payable\n    ifAdmin\n  {\n    _upgradeToAndCall(newImplementation, data, true);\n  }\n\n  /**\n   * @dev Returns the current admin.\n   */\n  function _admin() internal view virtual returns (address) {\n    return _getAdmin();\n  }\n\n  /**\n   * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n   */\n  function _beforeFallback() internal virtual override {\n    require(\n      msg.sender != _getAdmin(),\n      \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\"\n    );\n    super._beforeFallback();\n  }\n}\n"
    },
    "contracts/storage-based/clearing/RedstoneProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"./RedstoneCoreProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\n\ncontract RedstoneProxy is RedstoneCoreProxy, ERC1967Upgrade {\n  // Note! We cannot add non-constant fields to this contract\n  // Because they would override the fields from the proxied contract\n  // It happens because EVM identifies them based on types and order (not their names)\n\n  // We follow the EIP-1967 stanard for Proxy Storage Slots\n  // Learn more: https://eips.ethereum.org/EIPS/eip-1967\n  bytes32 constant _PRICE_FEED_SLOT =\n    bytes32(uint256(keccak256(\"redstone.price_feed.implementation\")) - 1);\n\n  /**\n   * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n   *\n   * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n   * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n   */\n  constructor(\n    address _logic,\n    address _priceFeedAddress,\n    bytes memory _data\n  ) payable {\n    _setPriceFeed(_priceFeedAddress);\n    _upgradeToAndCall(_logic, _data, false);\n  }\n\n  /**\n   * @dev Returns the current implementation address.\n   */\n  function _implementation()\n    internal\n    view\n    virtual\n    override\n    returns (address impl)\n  {\n    return ERC1967Upgrade._getImplementation();\n  }\n\n  /**\n   * @dev Returns the current price feed address\n   */\n  function _priceFeed() internal view override returns (address) {\n    return StorageSlot.getAddressSlot(_PRICE_FEED_SLOT).value;\n  }\n\n  function _setPriceFeed(address _priceFeedAddress) private {\n    require(\n      _priceFeedAddress != address(0),\n      \"Price feed address cannot be empty\"\n    );\n\n    assert(\n      _IMPLEMENTATION_SLOT ==\n        bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1)\n    );\n    StorageSlot.getAddressSlot(_PRICE_FEED_SLOT).value = _priceFeedAddress;\n  }\n\n  /**\n   * @dev Sets the price feed address (internal function)\n   */\n  function setPriceFeed(address _priceFeedAddress) external {\n    require(msg.sender == _getAdmin(), \"Only admin can set price feed\");\n    _setPriceFeed(_priceFeedAddress);\n  }\n}\n"
    },
    "contracts/storage-based/clearing/RedstoneCoreProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../../commons/BytesLib.sol\";\nimport \"../../commons/PriceFeedWithClearing.sol\";\nimport \"@openzeppelin/contracts/proxy/Proxy.sol\";\n\nabstract contract RedstoneCoreProxy is Proxy {\n  using BytesLib for bytes;\n\n  bytes32 constant MARKER = keccak256(\"Redstone.version.0.0.1\");\n  uint8 constant MARKER_SLOT_SIZE = 32;\n  uint8 constant LEN_SLOT_SIZE = 2;\n\n  /**\n   * @dev Delegates the current call to `implementation`.\n   *\n   * It extracts the pricing data and keep it in the storage of priceFeed contract.\n   * Then it forwards the call to the implementation recording the results.\n   * As the last step it cleans the data from priceFeed to save on gas fees\n   * and forwards the results to the caller.\n   */\n  function _delegate(address implementation) internal override {\n    // Check if transaction contains Redstone marker\n    bool isTxWithPricing = false;\n    if (msg.data.length > MARKER_SLOT_SIZE) {\n      isTxWithPricing =\n        msg.data.toBytes32(msg.data.length - MARKER_SLOT_SIZE) == MARKER;\n    }\n\n    // Register price data\n    bytes memory priceData;\n    uint16 priceDataLen;\n    uint16 markerAndLenOffset = (MARKER_SLOT_SIZE + LEN_SLOT_SIZE);\n    if (isTxWithPricing) {\n      priceDataLen = msg.data.toUint16(msg.data.length - markerAndLenOffset);\n      priceData = msg.data.slice(\n        msg.data.length - priceDataLen - markerAndLenOffset,\n        priceDataLen\n      );\n      (bool success, ) = _priceFeed().call(priceData);\n      require(success, \"Error setting price data\");\n    }\n\n    // Assembly version - TODO: fix it and compare gas costs\n    // uint8 delegationResult;\n    // // bytes memory delegationReturn;\n    // assembly {\n    //     // Copy msg.data. We take full control of memory in this inline assembly\n    //     // block because it will not return to Solidity code. We overwrite the\n    //     // Solidity scratch pad at memory position 0.\n    //     calldatacopy(0, 0, 36)\n\n    //     // Call the implementation.\n    //     // out and outsize are 0 because we don't know the size yet.\n    //     delegationResult := delegatecall(gas(), implementation, 0, 36, 0, 0)\n\n    //     // Copy the returned data.\n    //     returndatacopy(0, 0, returndatasize())\n    // }\n\n    // Delegate the original transaction\n    (bool delegationSuccess, bytes memory delegationResult) = implementation\n      .delegatecall(msg.data);\n\n    // Clear price data\n    if (isTxWithPricing) {\n      bytes memory clearDataPrefix = msg.data.slice(\n        msg.data.length - priceDataLen - markerAndLenOffset - 4,\n        4\n      );\n      bytes memory clearData = clearDataPrefix.concat(\n        priceData.slice(4, priceData.length - 4)\n      );\n      (bool success, ) = _priceFeed().call(clearData);\n      require(success, \"Error clearing price data\");\n    }\n\n    // Return results from base method\n    // TODO: review the code below\n    // Check if mload is needed\n    assembly {\n      switch delegationSuccess\n      // delegatecall returns 0 on error.\n      case 0 {\n        revert(add(delegationResult, 32), delegationResult)\n      }\n      default {\n        return(add(delegationResult, 32), mload(delegationResult))\n      }\n    }\n  }\n\n  /**\n   * @dev This is a virtual function that should be overriden\n   * to return the address of the contract which keeps the prices on-chain\n   */\n  function _priceFeed() internal view virtual returns (address);\n}\n"
    },
    "contracts/commons/PriceFeedWithClearing.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\npragma experimental ABIEncoderV2;\n\nimport \"./PriceVerifier.sol\";\nimport \"./PriceFeed.sol\";\n\n/**\n * @title PriceFeedWithClearing\n * @dev An extension to the PriceFeed contract that allows erasing data after usage\n * This may help to reduce the gas costs in some scenarios\n */\ncontract PriceFeedWithClearing is PriceFeed {\n  // A user that sets the prices in the context of the current transaction\n  address internal currentSetter;\n\n  /**\n   * @dev clear the prices to receive a gas refund\n   * @param priceData, a set of prices that need to be erased\n   **/\n  function clearPrices(PriceData calldata priceData) external {\n    require(\n      currentSetter == msg.sender,\n      \"The prices could be cleared only by the address which set them\"\n    );\n    for (uint256 i = 0; i < priceData.symbols.length; i++) {\n      delete prices[priceData.symbols[i]];\n    }\n\n    currentSetter = address(0);\n  }\n\n  /**\n   * @dev set the prices and records the account which provided data\n   * This mechanism is used to ensure that only the setter of original data is able to erase information\n   * @param priceData, a set of prices that are put in the storage\n   **/\n  function _setPrices(PriceData calldata priceData) internal override {\n    require(\n      currentSetter == address(0),\n      \"The prices could be set only once in the transaction\"\n    );\n\n    super._setPrices(priceData);\n\n    currentSetter = msg.sender;\n  }\n}\n"
    },
    "contracts/storage-based/clearing/RedstoneUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n//This code is represent the OpenZeppelin TransparentUpgradeableProxy.sol\n//and is modified only to maintain the inheritance-based design pattern\n//by changing the base contract\n\npragma solidity ^0.8.2;\n\nimport \"./RedstoneProxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\n\ncontract RedstoneUpgradeableProxy is RedstoneProxy {\n  /**\n   * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n   * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n   */\n  constructor(\n    address _logic,\n    address _priceFeedAddress,\n    address admin_,\n    bytes memory _data\n  ) payable RedstoneProxy(_logic, _priceFeedAddress, _data) {\n    assert(\n      _ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1)\n    );\n    _changeAdmin(admin_);\n  }\n\n  /**\n   * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n   */\n  modifier ifAdmin() {\n    if (msg.sender == _getAdmin()) {\n      _;\n    } else {\n      _fallback();\n    }\n  }\n\n  /**\n   * @dev Returns the current admin.\n   *\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n   *\n   * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n   * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n   * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n   */\n  function admin() external ifAdmin returns (address admin_) {\n    admin_ = _getAdmin();\n  }\n\n  /**\n   * @dev Returns the current implementation.\n   *\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n   *\n   * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n   * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n   * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n   */\n  function implementation() external ifAdmin returns (address implementation_) {\n    implementation_ = _implementation();\n  }\n\n  /**\n   * @dev Changes the admin of the proxy.\n   *\n   * Emits an {AdminChanged} event.\n   *\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n   */\n  function changeAdmin(address newAdmin) external virtual ifAdmin {\n    _changeAdmin(newAdmin);\n  }\n\n  /**\n   * @dev Upgrade the implementation of the proxy.\n   *\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n   */\n  function upgradeTo(address newImplementation) external ifAdmin {\n    _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n  }\n\n  /**\n   * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n   * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n   * proxied contract.\n   *\n   * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n   */\n  function upgradeToAndCall(address newImplementation, bytes calldata data)\n    external\n    payable\n    ifAdmin\n  {\n    _upgradeToAndCall(newImplementation, data, true);\n  }\n\n  /**\n   * @dev Returns the current admin.\n   */\n  function _admin() internal view virtual returns (address) {\n    return _getAdmin();\n  }\n\n  /**\n   * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n   */\n  function _beforeFallback() internal virtual override {\n    require(\n      msg.sender != _getAdmin(),\n      \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\"\n    );\n    super._beforeFallback();\n  }\n}\n"
    },
    "contracts/samples/SampleInlinedPriceAware.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../mocks/MockStatePriceProvider.sol\";\nimport \"../message-based/InlinedPriceAware.sol\";\n\n/**\n * @title SampleInlinedPriceAware\n * @dev An example of a contract using message-based way of fetching data from RedStone\n * It has only a few dummy methods used to benchmark gas consumption\n * It extends InlinedPriceAware which in-lines signer address and maximum delay of price feed\n * to reduce the gas of every invocation (saving is ~4k gas)\n */\ncontract SampleInlinedPriceAware is InlinedPriceAware {\n\n  function getPrice(bytes32 asset) external view returns (uint256) {\n    return getPriceFromMsg(asset);\n  }\n\n  function executeWithPrice(bytes32 asset) public view returns (uint256) {\n    return getPriceFromMsg(asset);\n  }\n\n  function executeWithPrices(bytes32[] memory assets)\n    public\n    view\n    returns (uint256[] memory)\n  {\n    return getPricesFromMsg(assets);\n  }\n}\n"
    },
    "contracts/mocks/MockStatePriceProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../commons/IPriceFeed.sol\";\n\n/**\n * @title MockStatePriceProvider\n * @dev It simulates an external contract that provides price information taken from storage.\n * It is a minimal version of other oracle referential data contracts\n * like AggregatorInterface from Chainlink or IStdReference from Band\n * and provides a lower bound for gas cost benchmarks.\n */\ncontract MockStatePriceProvider is IPriceFeed {\n  uint256 price = 777;\n\n  /**\n   * @dev gets mocked price\n   * @param symbol of the price - kept for interface compatibility\n   **/\n  function getPrice(bytes32 symbol) public view override returns (uint256) {\n    symbol; // It's added to avoid warnings about an unused function argument\n    return price;\n  }\n\n  /**\n   * @dev sets new price allowing to update the mocked value\n   * @param _price value of a new price\n   **/\n  function setPrice(uint256 _price) external {\n    price = _price;\n  }\n}\n"
    },
    "contracts/message-based/InlinedPriceAware.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract InlinedPriceAware {\n  using ECDSA for bytes32;\n\n  uint256 constant MAX_DELAY = 3 * 60;\n  address private constant TRUSTED_SIGNER = 0xFE71e9691B9524BC932C23d0EeD5c9CE41161884;\n\n  function getTrustedSigner() public view virtual returns (address) {\n    return TRUSTED_SIGNER;\n  }\n\n  function getPriceFromMsg(bytes32 symbol) internal view returns (uint256) {\n    bytes32[] memory symbols = new bytes32[](1);\n    symbols[0] = symbol;\n    return getPricesFromMsg(symbols)[0];\n  }\n\n  function getPricesFromMsg(bytes32[] memory symbols) internal view returns (uint256[] memory)\n  {\n    //The structure of calldata witn n - data items:\n    //The data that is signed (symbols, values, timestamp) are inside the {} brackets\n    //[origina_call_data| ?]{[[symbol | 32][value | 32] | n times][timestamp | 32]}[size | 1][signature | 65]\n\n    //1. First we extract dataSize - the number of data items (symbol,value pairs) in the message\n    uint8 dataSize; //Number of data entries\n    assembly {\n      //Calldataload loads slots of 32 bytes\n      //The last 65 bytes are for signature\n      //We load the previous 32 bytes and automatically take the 2 least significant ones (casting to uint16)\n      dataSize := calldataload(sub(calldatasize(), 97))\n    }\n\n    // 2. We calculate the size of signable message expressed in bytes\n    // ((symbolLen(32) + valueLen(32)) * dataSize + timeStamp length\n    uint16 messageLength = uint16(dataSize) * 64 + 32; //Length of data message in bytes\n\n    // 3. We extract the signableMessage\n\n    //(That's the high level equivalent 2k gas more expensive)\n    //bytes memory rawData = msg.data.slice(msg.data.length - messageLength - 65, messageLength);\n\n    bytes memory signableMessage;\n    assembly {\n      signableMessage := mload(0x40)\n      mstore(signableMessage, messageLength)\n      //The starting point is callDataSize minus length of data(messageLength), signature(65) and size(1) = 66\n      calldatacopy(\n        add(signableMessage, 0x20),\n        sub(calldatasize(), add(messageLength, 66)),\n        messageLength\n      )\n      mstore(0x40, add(signableMessage, 0x20))\n    }\n\n    // 4. We first hash the raw message and then hash it again with the prefix\n    // Following the https://github.com/ethereum/eips/issues/191 standard\n    bytes32 hash = keccak256(signableMessage);\n    bytes32 hashWithPrefix = keccak256(\n      abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)\n    );\n\n    // 5. We extract the off-chain signature from calldata\n\n    //(That's the high level equivalent 2k gas more expensive)\n    //bytes memory signature = msg.data.slice(msg.data.length - 65, 65);\n    bytes memory signature;\n    assembly {\n      signature := mload(0x40)\n      mstore(signature, 65)\n      calldatacopy(add(signature, 0x20), sub(calldatasize(), 65), 65)\n      mstore(0x40, add(signature, 0x20))\n    }\n\n    // 6. We verify the off-chain signature against on-chain hashed data\n\n    address signer = hashWithPrefix.recover(signature);\n    require(signer == getTrustedSigner(), \"Signer not authorized\");\n\n    //7. We extract timestamp from callData\n\n    uint256 dataTimestamp;\n    assembly {\n      //Calldataload loads slots of 32 bytes\n      //The last 65 bytes are for signature + 1 for data size\n      //We load the previous 32 bytes\n      dataTimestamp := calldataload(sub(calldatasize(), 98))\n    }\n    require(block.timestamp - dataTimestamp < MAX_DELAY, \"Data is too old\");\n\n    return _readFromCallData(symbols, uint256(dataSize), messageLength);\n  }\n\n  function _readFromCallData(bytes32[] memory symbols, uint256 dataSize, uint16 messageLength) private view returns (uint256[] memory) {\n    uint256[] memory values;\n    uint256 i;\n    uint256 j;\n    uint256 readyAssets;\n    bytes32 currentSymbol;\n\n    //We iterate directly through call data to extract the values of symbols\n    assembly {\n      let start := sub(calldatasize(), add(messageLength, 66))\n\n      values := msize()\n      mstore(values, mload(symbols))\n      mstore(0x40, add(add(values, 0x20), mul(mload(symbols), 0x20)))\n\n      for { i := 0 } lt(i, dataSize) { i := add(i, 1) } {\n        currentSymbol := calldataload(add(start, mul(i, 64)))\n\n        for { j := 0 } lt(j, mload(symbols)) { j := add(j, 1) } {\n          if eq(mload(add(add(symbols, 32), mul(j, 32))), currentSymbol) {\n            mstore(\n              add(add(values, 32), mul(j, 32)),\n              calldataload(add(add(start, mul(i, 64)), 32))\n            )\n            readyAssets := add(readyAssets, 1)\n          }\n\n          if eq(readyAssets, mload(symbols)) {\n            i := dataSize\n          }\n        }\n      }\n    }\n\n    return (values);\n  }\n}\n"
    },
    "contracts/samples/SampleStorageBased.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../commons/PriceFeed.sol\";\n\n/***\n * It is an example of a simple defi contract that allows depositing tokens,\n * getting their current valuation and swapping between each other based on the current price\n */\ncontract SampleStorageBased {\n  PriceFeed priceFeed;\n  bool private initialized;\n\n  bytes32[2] allowedAssets = [bytes32(\"ETH\"), bytes32(\"AVAX\")];\n\n  function initialize(PriceFeed _priceFeed) external {\n    require(!initialized);\n    priceFeed = _priceFeed;\n    initialized = true;\n  }\n\n  mapping(address => mapping(bytes32 => uint256)) balances;\n\n  function deposit(bytes32 symbol, uint256 amount) external {\n    // To check proxy in case of reverted tx\n    require(amount > 0, \"Amount must be greater than zero\");\n\n    balances[msg.sender][symbol] += amount;\n  }\n\n  function swap(\n    bytes32 fromSymbol,\n    bytes32 toSymbol,\n    uint256 amount\n  ) external {\n    balances[msg.sender][fromSymbol] -= amount;\n    balances[msg.sender][toSymbol] +=\n      (amount * priceFeed.getPrice(fromSymbol)) /\n      priceFeed.getPrice(toSymbol);\n  }\n\n  function balanceOf(address account, bytes32 symbol)\n    external\n    view\n    returns (uint256)\n  {\n    return balances[account][symbol];\n  }\n\n  function currentValueOf(address account, bytes32 symbol)\n    external\n    view\n    returns (uint256)\n  {\n    uint256 price = priceFeed.getPrice(symbol);\n    return balances[account][symbol] * price;\n  }\n\n  function getCurrentTime() public view returns (uint256) {\n    return block.timestamp;\n  }\n}\n"
    },
    "contracts/deprecated/message-based/NonAssemblySinglePriceAware.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../../commons/PriceVerifier.sol\";\nimport \"../../commons/BytesLib.sol\";\nimport \"../../commons/PriceFeed.sol\";\nimport \"@openzeppelin/contracts/proxy/Proxy.sol\";\n\ncontract NonAssemblySinglePriceAware is PriceFeed {\n  using BytesLib for bytes;\n\n  bytes32 constant MARKER = keccak256(\"Redstone.version.0.0.1\");\n\n  function getPriceFromMsg(bytes32 symbol) internal view returns (uint256) {\n    bool isTxWithPricing = false;\n    if (msg.data.length > 32) {\n      //1k gas\n      isTxWithPricing = msg.data.toBytes32(msg.data.length - 32) == MARKER;\n    }\n\n    if (isTxWithPricing) {\n      uint16 rawPriceDataAndSigLen = msg.data.toUint16(msg.data.length - 34); //1030 gas\n      bytes memory rawPriceDataAndSig = msg.data.slice(\n        msg.data.length - rawPriceDataAndSigLen - 30,\n        rawPriceDataAndSigLen - 4\n      ); //3k gas\n\n      PriceData memory priceData;\n      bytes memory signature;\n      (priceData, signature) = abi.decode(\n        rawPriceDataAndSig,\n        (PriceData, bytes)\n      ); //2k gas\n\n      _checkPrices(priceData, signature);\n\n      for (uint256 i = 0; i < priceData.symbols.length; i++) {\n        //400 gas\n        if (priceData.symbols[i] == symbol) {\n          return priceData.values[i];\n        }\n      }\n    }\n    revert(\"Price data not found\");\n  }\n}\n"
    },
    "contracts/deprecated/samples/SampleNonAssemblySinglePriceAware.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../message-based/NonAssemblySinglePriceAware.sol\";\nimport \"../../mocks/MockStatePriceProvider.sol\";\n\ncontract SampleNonAssemblySinglePriceAware is NonAssemblySinglePriceAware {\n  MockStatePriceProvider mockStatePriceProvider = new MockStatePriceProvider();\n\n  function executeWithPrice(bytes32 symbol) public returns (uint256) {\n    return getPriceFromMsg(symbol);\n  }\n\n  function getTime() public view returns (uint256) {\n    return block.timestamp;\n  }\n}\n"
    },
    "contracts/mocks/MockPriceVerifierProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../commons/PriceVerifier.sol\";\n\ncontract MockPriceVerifierProxy is PriceVerifier {\n  function recoverDataSignerPublic(\n    PriceData memory priceData,\n    bytes memory signature\n  ) public view returns (address) {\n    return recoverDataSigner(priceData, signature);\n  }\n}\n"
    },
    "contracts/samples/SampleChainlink.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../mocks/AggregatorV3Interface.sol\";\n\n/**\n * @title SampleChainlink\n * @dev An example of a contract that uses the most popular Chainlink Reference Data\n * It is used for benchmarking gas costs\n */\ncontract SampleChainlink {\n  AggregatorV3Interface internal priceFeed;\n\n  /**\n   * Network: Kovan\n   * Aggregator: ETH/USD\n   * Address: 0x9326BFA02ADD2366b30bacB125260Af641031331\n   */\n  constructor() {\n    priceFeed = AggregatorV3Interface(\n      0x9326BFA02ADD2366b30bacB125260Af641031331\n    );\n  }\n\n  /**\n   * Returns the latest price\n   */\n  function executeWithPrice(uint256 val) public view returns (uint256) {\n    val; // It's added to avoid warning about an unused argument\n    (, int256 price, , , ) = priceFeed.latestRoundData();\n    return uint256(price);\n  }\n}\n"
    },
    "contracts/mocks/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\n/**\n * @title AggregatorV3Interface\n * @dev Taken from https://www.npmjs.com/package/@chainlink/contracts to benchmark gas costs\n * The solidity version was bumped up to match our codebases\n */\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}