{
  "language": "Solidity",
  "sources": {
    "contracts/samples/SamplePriceAware.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../mocks/MockStatePriceProvider.sol\";\nimport \"../message-based/PriceAwareOwnable.sol\";\n\n/**\n * @title SamplePriceAware\n * @dev An example of a contract using a message-based way of fetching data from RedStone\n * It has only a few methods used to benchmark gas consumption\n * It extends PriceAware and allows changing trusted signer and message delay\n */\ncontract SamplePriceAware is PriceAwareOwnable {\n\n  uint256 lastPrice;\n\n  function getPrice(bytes32 asset) external view returns (uint256) {\n    return getPriceFromMsg(asset);\n  }\n\n  function executeWithPrice(bytes32 asset) public returns (uint256) {\n    lastPrice = getPriceFromMsg(asset);\n    return lastPrice;\n  }\n\n  function executeWithPrices(bytes32[] memory assets) public view returns (uint256[] memory) {\n    return getPricesFromMsg(assets);\n  }\n\n  // For ProxyConnector tests\n  function getPriceManyParameters (\n    bytes32 asset,\n    uint256 mockArg1,\n    string memory mockArg2,\n    string memory mockArg3,\n    string memory mockArg4,\n    string memory mockArg5,\n    string memory mockArg6\n  ) external view returns (uint256) {\n    // This is added to avoid warnings about unused arguments\n    mockArg1; mockArg2; mockArg3; mockArg4; mockArg5; mockArg6;\n    return getPriceFromMsg(asset);\n  }\n\n  function a() external view returns (uint256) {\n    return getPriceFromMsg(bytes32(\"ETH\"));\n  }\n\n  function returnMsgValue() external payable returns (uint256) {\n    return msg.value;\n  }\n}\n"
    },
    "contracts/mocks/MockStatePriceProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../commons/IPriceFeed.sol\";\n\n/**\n * @title MockStatePriceProvider\n * @dev It simulates an external contract that provides price information taken from storage.\n * It is a minimal version of other oracle referential data contracts\n * like AggregatorInterface from Chainlink or IStdReference from Band\n * and provides a lower bound for gas cost benchmarks.\n */\ncontract MockStatePriceProvider is IPriceFeed {\n  uint256 price = 777;\n\n  /**\n   * @dev gets mocked price\n   * @param symbol of the price - kept for interface compatibility\n   **/\n  function getPrice(bytes32 symbol) public view override returns (uint256) {\n    symbol; // It's added to avoid warnings about an unused function argument\n    return price;\n  }\n\n  /**\n   * @dev sets new price allowing to update the mocked value\n   * @param _price value of a new price\n   **/\n  function setPrice(uint256 _price) external {\n    price = _price;\n  }\n}\n"
    },
    "contracts/message-based/PriceAwareOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./PriceAware.sol\";\n\ncontract PriceAwareOwnable is PriceAware, Ownable {\n\n  address private trustedSigner;\n\n  function authorizeSigner(address _trustedSigner) external onlyOwner {\n    require(_trustedSigner != address(0));\n    trustedSigner = _trustedSigner;\n\n    emit TrustedSignerChanged(trustedSigner);\n  }\n\n  function isSignerAuthorized(address _receviedSigner) public override virtual view returns (bool) {\n    return _receviedSigner == trustedSigner;\n  }\n\n  /* ========== EVENTS ========== */\n\n  /**\n   * @dev emitted after the owner updates trusted signer\n   * @param newSigner the address of the new signer\n   **/\n  event TrustedSignerChanged(address indexed newSigner);\n}\n"
    },
    "contracts/commons/IPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\n/**\n * @title IPriceFeed\n * @dev A minimal interface for contracts providing pricing data\n */\ninterface IPriceFeed {\n  /**\n   * @dev return the price of a given asset\n   * @param symbol that identifies an asset (it's passed as bytes32 for the gas efficiency)\n   **/\n  function getPrice(bytes32 symbol) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/message-based/PriceAware.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nabstract contract PriceAware {\n  using ECDSA for bytes32;\n\n  uint256 constant _MAX_DATA_TIMESTAMP_DELAY = 3 * 60; // 3 minutes\n  uint256 constant _MAX_BLOCK_TIMESTAMP_DELAY = 15; // 15 seconds\n\n  /* ========== VIRTUAL FUNCTIONS (MAY BE OVERRIDEN IN CHILD CONTRACTS) ========== */\n\n  function getMaxDataTimestampDelay() public virtual view returns (uint256) {\n    return _MAX_DATA_TIMESTAMP_DELAY;\n  }\n\n  function getMaxBlockTimestampDelay() public virtual view returns (uint256) {\n    return _MAX_BLOCK_TIMESTAMP_DELAY;\n  }\n\n  function isSignerAuthorized(address _receviedSigner) public virtual view returns (bool);\n\n  function isTimestampValid(uint256 _receivedTimestamp) public virtual view returns (bool) {\n    // Getting data timestamp from future seems quite unlikely\n    // But we've already spent too much time with different cases\n    // Where block.timestamp was less than dataPackage.timestamp.\n    // Some blockchains may case this problem as well.\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\n    // and allow data \"from future\" but with a small delay\n    require(\n      (block.timestamp + getMaxBlockTimestampDelay()) > _receivedTimestamp,\n      \"Data with future timestamps is not allowed\");\n\n    return block.timestamp < _receivedTimestamp\n      || block.timestamp - _receivedTimestamp < getMaxDataTimestampDelay();\n  }\n\n  /* ========== FUNCTIONS WITH IMPLEMENTATION (CAN NOT BE OVERRIDEN) ========== */\n\n  function getPriceFromMsg(bytes32 symbol) internal view returns (uint256) {bytes32[] memory symbols = new bytes32[](1); symbols[0] = symbol;\n    return getPricesFromMsg(symbols)[0];\n  }\n\n  function getPricesFromMsg(bytes32[] memory symbols) internal view returns (uint256[] memory) {\n    // The structure of calldata witn n - data items:\n    // The data that is signed (symbols, values, timestamp) are inside the {} brackets\n    // [origina_call_data| ?]{[[symbol | 32][value | 32] | n times][timestamp | 32]}[size | 1][signature | 65]\n\n    // 1. First we extract dataSize - the number of data items (symbol,value pairs) in the message\n    uint8 dataSize; //Number of data entries\n    assembly {\n      // Calldataload loads slots of 32 bytes\n      // The last 65 bytes are for signature\n      // We load the previous 32 bytes and automatically take the 2 least significant ones (casting to uint16)\n      dataSize := calldataload(sub(calldatasize(), 97))\n    }\n\n    // 2. We calculate the size of signable message expressed in bytes\n    // ((symbolLen(32) + valueLen(32)) * dataSize + timeStamp length\n    uint16 messageLength = uint16(dataSize) * 64 + 32; //Length of data message in bytes\n\n    // 3. We extract the signableMessage\n\n    // (That's the high level equivalent 2k gas more expensive)\n    // bytes memory rawData = msg.data.slice(msg.data.length - messageLength - 65, messageLength);\n\n    bytes memory signableMessage;\n    assembly {\n      signableMessage := mload(0x40)\n      mstore(signableMessage, messageLength)\n      // The starting point is callDataSize minus length of data(messageLength), signature(65) and size(1) = 66\n      calldatacopy(\n        add(signableMessage, 0x20),\n        sub(calldatasize(), add(messageLength, 66)),\n        messageLength\n      )\n      mstore(0x40, add(signableMessage, 0x20))\n    }\n\n    // 4. We first hash the raw message and then hash it again with the prefix\n    // Following the https://github.com/ethereum/eips/issues/191 standard\n    bytes32 hash = keccak256(signableMessage);\n    bytes32 hashWithPrefix = keccak256(\n      abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)\n    );\n\n    // 5. We extract the off-chain signature from calldata\n\n    // (That's the high level equivalent 2k gas more expensive)\n    // bytes memory signature = msg.data.slice(msg.data.length - 65, 65);\n    bytes memory signature;\n    assembly {\n      signature := mload(0x40)\n      mstore(signature, 65)\n      calldatacopy(add(signature, 0x20), sub(calldatasize(), 65), 65)\n      mstore(0x40, add(signature, 0x20))\n    }\n\n    // 6. We verify the off-chain signature against on-chain hashed data\n\n    address signer = hashWithPrefix.recover(signature);\n    require(isSignerAuthorized(signer), \"Signer not authorized\");\n\n    // 7. We extract timestamp from callData\n\n    uint256 dataTimestamp;\n    assembly {\n      // Calldataload loads slots of 32 bytes\n      // The last 65 bytes are for signature + 1 for data size\n      // We load the previous 32 bytes\n      dataTimestamp := calldataload(sub(calldatasize(), 98))\n    }\n\n    // 8. We validate timestamp\n    require(isTimestampValid(dataTimestamp), \"Data timestamp is invalid\");\n\n    return _readFromCallData(symbols, uint256(dataSize), messageLength);\n  }\n\n  function _readFromCallData(bytes32[] memory symbols, uint256 dataSize, uint16 messageLength) private pure returns (uint256[] memory) {\n    uint256[] memory values;\n    uint256 i;\n    uint256 j;\n    uint256 readyAssets;\n    bytes32 currentSymbol;\n\n    // We iterate directly through call data to extract the values for symbols\n    assembly {\n      let start := sub(calldatasize(), add(messageLength, 66))\n\n      values := msize()\n      mstore(values, mload(symbols))\n      mstore(0x40, add(add(values, 0x20), mul(mload(symbols), 0x20)))\n\n      for { i := 0 } lt(i, dataSize) { i := add(i, 1) } {\n        currentSymbol := calldataload(add(start, mul(i, 64)))\n\n        for { j := 0 } lt(j, mload(symbols)) { j := add(j, 1) } {\n          if eq(mload(add(add(symbols, 32), mul(j, 32))), currentSymbol) {\n            mstore(\n              add(add(values, 32), mul(j, 32)),\n              calldataload(add(add(start, mul(i, 64)), 32))\n            )\n            readyAssets := add(readyAssets, 1)\n          }\n\n          if eq(readyAssets, mload(symbols)) {\n            i := dataSize\n          }\n        }\n      }\n    }\n\n    return (values);\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/samples/SampleProxyConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../commons/ProxyConnector.sol\";\nimport \"./SamplePriceAware.sol\";\n\n/**\n * @title ProxyConnector\n * @dev An example of a contract that makes a call to a PriceAware type contract\n */\ncontract SampleProxyConnector {\n\n  SamplePriceAware samplePriceAware;\n\n  function initializePriceAware() external {\n    samplePriceAware = new SamplePriceAware();\n    samplePriceAware.authorizeSigner(0xFE71e9691B9524BC932C23d0EeD5c9CE41161884);\n  }\n\n  function checkPrice(bytes32 asset, uint256 price) external {\n    bytes memory encodedFunction = abi.encodeWithSelector(SamplePriceAware.getPrice.selector, asset);\n\n    bytes memory encodedResult = ProxyConnector.proxyCalldata(address(samplePriceAware), encodedFunction, false);\n\n    uint256 oraclePrice = abi.decode(encodedResult, (uint256));\n\n    require(oraclePrice == price, 'Wrong price!');\n  }\n\n  function getPriceShortEncodedFunction (bytes32 asset, uint256 price) external {\n    asset; // It's added to avoid warning about unused function argument\n\n    bytes memory encodedFunction = abi.encodeWithSelector(\n      SamplePriceAware.a.selector\n    );\n\n    bytes memory encodedResult = ProxyConnector.proxyCalldata(address(samplePriceAware), encodedFunction, false);\n\n    uint256 oraclePrice = abi.decode(encodedResult, (uint256));\n\n    require(oraclePrice == price, 'Wrong price!');\n  }\n\n  function requireValueForward() external payable {\n    bytes memory encodedFunction = abi.encodeWithSelector(\n      SamplePriceAware.returnMsgValue.selector\n    );\n    bytes memory encodedResult = ProxyConnector.proxyCalldata(address(samplePriceAware), encodedFunction, false);\n    uint256 msgValue = abi.decode(encodedResult, (uint256));\n\n    require(msgValue == 0, 'Expected msg.value not to be passed');\n\n    encodedResult = ProxyConnector.proxyCalldata(address(samplePriceAware), encodedFunction, true);\n    msgValue = abi.decode(encodedResult, (uint256));\n\n    require(msgValue == msg.value, 'Expected msg.value to be passed');\n  }\n\n  function getPriceLongEncodedFunction(bytes32 asset, uint256 price) external {\n    bytes memory encodedFunction = abi.encodeWithSelector(\n      SamplePriceAware.getPriceManyParameters.selector,\n      asset,\n      115792089237316195423570985008687907853269984665640564039457584007913129639935,\n      'long_string_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',\n      'long_string_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',\n      'long_string_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',\n      'long_string_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',\n      'long_string_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n      );\n\n    bytes memory encodedResult = ProxyConnector.proxyCalldata(address(samplePriceAware), encodedFunction, false);\n\n    uint256 oraclePrice = abi.decode(encodedResult, (uint256));\n\n    require(oraclePrice == price, 'Wrong price!');\n  }\n}\n"
    },
    "contracts/commons/ProxyConnector.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nlibrary ProxyConnector {\n\n  function proxyCalldata(address contractAddress, bytes memory encodedFunction, bool forwardValue) internal returns (bytes memory) {\n    bool success;\n    bytes memory result;\n    bytes memory message = prepareMessage(encodedFunction);\n\n    if (forwardValue == true) {\n      (success, result) = contractAddress.call{value: msg.value}(message);\n    } else {\n      (success, result) = contractAddress.call(message);\n    }\n    return prepareReturnValue(success, result);\n  }\n\n  function proxyCalldataView(address contractAddress, bytes memory encodedFunction) internal view returns (bytes memory) {\n    bytes memory message = prepareMessage(encodedFunction);\n    (bool success, bytes memory result) = contractAddress.staticcall(message);\n    return prepareReturnValue(success, result);\n  }\n\n  function prepareMessage(bytes memory encodedFunction) private pure returns (bytes memory) {\n    uint8 dataSymbolsCount;\n\n    // calldatasize - whole calldata size\n    // we get 97 last bytes, but we actually want to read only one byte\n    // that stores number of redstone data symbols\n    // Learn more: https://github.com/redstone-finance/redstone-evm-connector\n    // calldataload - reads 32 bytes from calldata (it receives an offset)\n    assembly {\n      // We assign 32 bytes to dataSymbolsCount, but it has uint8 type (8 bit = 1 byte)\n      // That's why only the last byte is assigned to dataSymbolsCount\n      dataSymbolsCount := calldataload(sub(calldatasize(), 97))\n    }\n\n    uint16 redstonePayloadBytesCount = uint16(dataSymbolsCount) * 64 + 32 + 1 + 65; // datapoints + timestamp + data size + signature\n\n    uint256 encodedFunctionBytesCount = encodedFunction.length;\n\n    uint256 i;\n    bytes memory message;\n\n    assembly {\n      message := mload(0x40) // sets message pointer to first free place in memory\n\n      // We save length of our message (it's a standard in EVM)\n      mstore(\n        message, // address\n        add(encodedFunctionBytesCount, redstonePayloadBytesCount) // length of the result message\n      )\n\n      // Copy function and its arguments byte by byte\n      for { i := 0 } lt(i, encodedFunctionBytesCount) { i := add(i, 1) } {\n        mstore(\n          add(add(0x20, message), mul(0x20, i)), // address\n          mload(add(add(0x20, encodedFunction), mul(0x20, i))) // byte to copy\n        )\n      }\n\n      // Copy redstone payload to the message bytes\n      calldatacopy(\n        add(message, add(0x20, encodedFunctionBytesCount)), // address\n        sub(calldatasize(), redstonePayloadBytesCount), // offset\n        redstonePayloadBytesCount // bytes length to copy\n      )\n\n      // Update first free memory pointer\n      mstore(\n        0x40,\n        add(add(message, add(redstonePayloadBytesCount, encodedFunctionBytesCount)), 0x20 /* 0x20 == 32 - message length size that is stored in the beginning of the message bytes */))\n    }\n\n    return message;\n  }\n\n  function prepareReturnValue(bool success, bytes memory result) internal pure returns (bytes memory) {\n    if (!success) {\n      if (result.length > 0) {\n        assembly {\n          let result_size := mload(result)\n          revert(add(32, result), result_size)\n        }\n      } else {\n        revert(\"Proxy connector call failed\");\n      }\n    }\n\n    return result;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}